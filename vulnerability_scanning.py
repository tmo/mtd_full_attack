import sys
import subprocess
import logging
import time
import os
import json 

from helpers import get_output_file_name

# TODO should I make this a class?

def get_cookie(): 
    # TODO take in host ect
    cookie_file = "resources/default.json"
    host = "http://192.168.40.132/dvwa/login.php"
    osinput = "wapiti-getcookie -c {cookie} -u  {host}"
    osinput = osinput.format(
        host = "http://192.168.40.132/dvwa/login.php",
        cookie = cookie_file,
    )
    logging.info("Running command... " + osinput)
    r = subprocess.Popen(["wapiti-getcookie", "-c", cookie_file, "-u", host], 
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    out = r.communicate(input=b"0\nadmin\npassword\n\n")

    # Set security to low
    with open("./"+cookie_file, 'r') as f:  
        content = json.load(f)    
        content[list(content.keys())[0]]["/dvwa"]["security"]["value"]="low"
    with open("./"+cookie_file, 'w') as f:  
        json.dump(content, f)
    return cookie_file

# TODO this could be a class with cookie on its own
def get_cookie_contents(cookie_file):
    with open(cookie_file, 'r') as f:  
        content = json.load(f)    
    host_cont = content[list(content.keys())[0]]
    cookies_list = []
    for key in host_cont:
        for key2 in host_cont[key]:
            cookies_list.append(key2+"="+host_cont[key][key2]["value"])
    cookie_contents = ';'.join([str(elem) for elem in cookies_list])
    return cookie_contents


def wapiti_scan(host=None, cookie=None, exclude=None, modules=None, 
                group_name=None, print_output=True, os_output=False):
    if not host:
        logging.error("No host")
        return
        # host = "http://192.168.40.132/dvwa/"
    if not exclude:
        exclude = host+"logout.php"
        # exclude = "http://192.168.40.132/dvwa/logout.php"
    if not cookie:
        logging.warning("No cookie")
        cookie = "./resources/default_lab.json"
        # cookie = get_cookie()
    if not modules:
        modules = "sql,xss,exec"

    result_file = get_output_file_name(time.time(), "wapiti", group=group_name) +".json"
    log_file = get_output_file_name(time.time(), "wapiti_osout", group=group_name)

    # TODO add --flush-session
    osinput = "wapiti  -u  {host} -c {cookie} -x {exclude} -m {modules} " + \
                "-f {format} -o {output} --flush-session"
    osinput = osinput.format(
        host = host,
        cookie = cookie,
        exclude = exclude,
        modules = modules,
        format = "json",
        output = result_file
    )

    osinput_mod = osinput
    if not os_output:
        osinput_mod += " > " + log_file
    logging.info("Running command... " + osinput_mod)
    start = time.time()
    # r = os.system(osinput_mod)
    r = subprocess.call(osinput_mod, shell=True, timeout=120)

    end = time.time()
           
    wapiti_results = get_wapiti_results(result_file)
    num_results=0 
    for key in wapiti_results.keys():
        num_results += len(wapiti_results[key])
    # logging.info("Total number of wapiti results is {}".format(num_results))
    success = True if num_results > 0 else False

    if print_output:
        print("2;{};{};{};{}".format(end-start, osinput,
        result_file, success))
    
    result = {
        "stage":2,
        "time":end-start, 
        "settings": osinput,
        "results":wapiti_results,
        "success":success
    }
    
    return result

def get_wapiti_results(result_file):
    with open(result_file, 'r') as f:      
        content = eval(f.read())
    vuls = content["vulnerabilities"]
    #print(vuls.keys())
    #print(len(vuls))
    
    ## number of vulnerabilities in each catagory
    #for key in vuls.keys():
    #    print(key, len(vuls[key]), type(vuls[key]))
    #print(vuls[list(vuls.keys())[0]][0].keys())

    return vuls

def modify_cookie_ip(ip, cookie_file):
    """
    Take the first key in the cookie file as the ip address and switch it out with 
    a new IP address
    """
    start = time.time()
    with open("./"+cookie_file, 'r') as f:  
        content = json.load(f)  

    content[ip] = content.pop(list(content.keys())[0])

    with open("./"+cookie_file, 'w') as f:  
        json.dump(content, f)
    end = time.time()

    logging.info("Changed cookie ip in time {} ".format(end-start))
